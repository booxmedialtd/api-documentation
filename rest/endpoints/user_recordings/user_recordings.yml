openapi: 3.0.0
info:
  version: "1.0.0"
  title: "User recording"
tags:
- name: Recording Requests
  description: >-
    Recording requests are requests for us to record a specific program.
    They will be replaced with the new tag based recording system in due course.
- name: Recording Slots
  description: >-
    Recording slots are Broadcast Slots that are intended to be recorded
- name: Recordings
  description: >-
    Recordings are programs that the user has asked to be recorded and which have been marked by the media backend as having been completed
- name: Recording Groups
  description: >-
    Recording groups are arbitrary ways for users to group recordings.
- name: Legacy support
  description:
    These endpoints should be used with caution as they are used to support legacy use cases and are deprecated.
servers:
- url: 'https://demo.aminocom.com/api/recordings/v1/'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
- bearerAuth: []         # use the same name as above
paths:

# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# RECORDING SLOTS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /recording_slots/{recording_slot_id}:

    patch:
      tags:
      - Recording Slots
      summary: Update the status of a recording slot.  Note that only the status field is acceptable to patch.
      operationId: putRecordingRequest
      parameters:
        - in: path
          name: recording_request_id
          description: The id of the recording request
          schema:
            type: string
          example: 24369947-8d46-4453-bdc2-9e1d88c220ff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/PatchDocument.yml#/PatchDocument"
            example:
              op: "replace"
              path: "/data/0/attributes/status"
              value: "RECORDING_FAILED"
              from: null
      responses:
        204:
          description: |
            The resource was updated successfully, no response body is needed

# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /{device_id}/recording_slots:
    get:
      summary: Return a list of recording slots that a device needs to make
      tags:
      - Recording Slots
      operationId: indexRecordingSlots
      parameters:
      - in: path
        name: device_id
        description: The user id to obtain recordings for
        required: true
        schema:
          type: string
      - in: query
        name: filter
        required: false
        description: >
          How many seconds in the future to look for slots.
          By default this is 3600
          Example usage:  /user/{user_id}/user_recordings?filter[window_seconds]=3600
        schema:
          type: string
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                      - type
                      - id
                      properties:
                        type:
                          type: string
                          example: RecordingSlot
                        id:
                          type: string
                          example: ddbfa001-1de3-4210-bd3f-183e771db48d
                          description: >-
                            The id of the request entity
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/RecordingSlotEntity.yml#/RecordingSlotEntity"
        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# RECORDING REQUESTS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user/{user_id}/user_recording_requests/:
    get:
      tags:
      - Recording Requests
      summary: Get an index of user recording request entities.  Requests are sorted by date ascending.
      operationId: indexRecordingRequests
      parameters:
        - in: path
          name: user_id
          description: The user id to obtain recordings for
          required: true
          schema:
            type: string
        - in: query
          name: page_number
          required: false
          description: >
            The page number (100 results per page) of results to retrieve.
            If this parameter is ommitted then it is assumed to be 1 (not zero based, 1 means the first page)
          schema:
            type: integer
        - in: query
          name: filter
          required: false
          description: >
            Example usage:  /user/{user_id}/user_recordings?filter[status]=WAITING
          schema:
            type: string
            enum: ["NEW","WAITING","RECORDING","FAILED","FAILED_PERMANENTLY","COMPLETE"]
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                      - type
                      - id
                      properties:
                        type:
                          type: string
                          example: UserRecordingRequest
                        id:
                          type: string
                          example: 24369947-8d46-4453-bdc2-9e1d88c220ff
                          description: >-
                            The id of the request entity
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingRequestEntity.yml#/UserRecordingRequestEntity"
        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"
    post:
      tags:
      - Recording Requests
      summary: Request that a new recording is made
      description: Note that the example given is minimal, please inspect the model for full details.
      operationId: createRecordingRequest
      parameters:
        - in: path
          name: user_id
          required: true
          description: The identity of the user to schedule the recording for.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingRequestEntity.yml#/UserRecordingRequestEntity"
            example:
              serial_recording:
                record_series_of_episodes: true
                maximum_episodes_to_record: 10
                expire_timestamp: 1543839142
              relationships:
                - classification_tag:
                    matching_rules:
                      key: Program.title
                      operator: eq
                      value: Die Hard
                - user_recording_device:
                    type: cloud


      responses:
        201:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                      - type
                      - id
                      properties:
                        type:
                          type: string
                          example: UserRecordingRequest
                        id:
                          type: string
                          description: "The id of the entity that was created"
                          example: "c74e8b26-079c-4d01-95a2-da8fb6139179"
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingRequestEntity.yml#/UserRecordingRequestEntity"

# ---------------------------------------------------------------------------------------------------------------------------------

  /user_recording_requests/{recording_request_id}:
    get:
      tags:
      - Recording Requests
      summary: Obtain details of a particular user recording request
      operationId: getRecordingRequest
      parameters:
        - in: path
          name: recording_request_id
          description: The id of the recording request
          schema:
            type: string
          example: d9db7aca-bc54-410f-af0d-a286adc0911f
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                - data
                properties:
                  data:
                    type: object
                    required:
                    - type
                    - id
                    properties:
                      type:
                        type: string
                        example: UserRecordingRequest
                      id:
                        type: string
                        description: "The id of the entity being referenced"
                        example: "d9db7aca-bc54-410f-af0d-a286adc0911f"
                      attributes:
                        $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingRequestEntity.yml#/UserRecordingRequestEntity"
                  included:
                    type: array
                    items:
                      anyOf:
                        - type: object
                          properties:
                            type:
                              type: string
                              example: "RecordingSlot"
                              description: The type of the entity that is being included.
                            id:
                              type: string
                              example: ddbfa001-1de3-4210-bd3f-183e771db48d
                            attributes:
                                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/RecordingSlotEntity.yml#/RecordingSlotEntity"
                        - type: object
                          properties:
                            type:
                              type: string
                              example: "ClassificationTag"
                              description: The type of the entity that is being included.
                            id:
                              type: string
                              example: abdf8785-cb23-445b-946f-69e8770500a1
                            attributes:
                                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/EnrichedMetadata/ClassificationTagEntity.yml#/ClassificationTagEntity"
    delete:
      tags:
      - Recording Requests
      summary: Delete a recording request.  As a side effect all of the recording slots will also be deleted.
      operationId: deleteUserRecordingRequest
      parameters:
        - in: path
          name: recording_request_id
          description: The id of the recording request
          schema:
            type: string
          example: cdf5b4f7-236c-4a3c-b848-9223ed816a0c

      responses:
        '204':
          description: |
            The resource was deleted successfully

# -------------------------------------------------------------------------------------------------------------------------------------------------
#  USER RECORDINGS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user/{user_id}/user_recordings/:
    get:
      tags:
      - Recordings
      summary: Get an index of user recording entities
      description:  >-
        NOTE:  This endpoint will *always* include [Program] relationships and DOES NOT support the `included` parameter.
        The default sort order is by time of broadcast descending.
      operationId: indexRecordings
      parameters:
        - in: path
          name: user_id
          description: The user id to obtain recordings for
          required: true
          schema:
            type: string
        - in: query
          name: page_number
          required: false
          description: >
            The page number (100 results per page) of results to retrieve.  If this parameter is ommitted then it is assumed to be 1 (not zero based, 1 means the first page)
          schema:
            type: integer
        - in: query
          name: filter
          required: false
          description: >
            Only the following filters are supported: [expiring]
            Example usage:  /user/{user_id}/user_recordings?filter[expiring]=X
            The value supplied is the number of days in the future that determines whether a record should be included in the result set.
            Only the following values are accepted [today|3|7|30] and if an invalid value is given a 400 error will be returned.
            Days must be calculated using the server timezone and should include time from 00:00:00 to 23:59:59 (in other words be rounded
            to a whole day rather than using the time of the request).
            Only a single value may be supplied.
            This response must be privately cached until midnight of the day it was first made.
            Example:  If you make this request at 09:23 am on 28th November with "expiring=3" then you should expect three whole days - 29th, 30th, and 1st Dec.
            This is because we round the start of the window to midnight of the day that the request was made, and then include three days.
          schema:
            type: string
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                - data
                properties:
                  links:
                    type: object
                    properties:
                      play:
                        type: string
                        example: https://demo.com/api/channel/38/stream/103/play?userEmail=boox6%40cloudpvr.nl&service=example&startover=false&stream_type=hls&service=example
                        description: Where to find information about playing this recording
                  data:
                    type: array
                    items:
                      type: object
                      required:
                      - type
                      - id
                      properties:
                        type:
                          type: string
                          example: UserRecording
                        id:
                          type: string
                          example: '{"user_id":1,"epg_id":749,"continuous":0}'
                          description: >-
                            The example gets parsed to display like an object.  The id of the recording itself.  This is a JSON string at the moment because we are using a composite primary key to model this entity identity.  In the near future this will become a standard UUID.
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingEntity.yml#/UserRecordingEntity"
                  included:
                    type: array
                    description: "This key MUST NOT be included if the `included` parameter is not used in the request URL"
                    items:
                      anyOf:
                      - type: object
                        description: "Note that different sorts of entity may be included (this array is not guaranteed to be homogenous), but the Swagger definition does not allow including more than one example of an item of an array so only one type is shown."
                        properties:
                          type:
                            type: string
                            example: "Program"
                            description: The type of the entity that is being included.
                          id:
                            type: string
                            example: "d0de0088-3141-439e-8455-839bdb8f6cec"
                          attributes:
                              $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/EnrichedMetadata/ProgramEntity.yml#/ProgramEntity"
                      - type: object
                        description: "Note that different sorts of entity may be included (this array is not guaranteed to be homogenous), but the Swagger definition does not allow including more than one example of an item of an array so only one type is shown."
                        properties:
                          type:
                            type: string
                            example: "RecordingRequest"
                            description: The type of the entity that is being included.
                          id:
                            type: string
                            example: "b63c666c-2a84-4f2d-a006-97f236912c77"
                      - type: object
                        description: "Note that different sorts of entity may be included (this array is not guaranteed to be homogenous), but the Swagger definition does not allow including more than one example of an item of an array so only one type is shown."
                        properties:
                          type:
                            type: string
                            example: "UserRecordingDevice"
                            description: The type of the entity that is being included.
                          id:
                            type: string
                            example: "d28558a8-588b-47e6-ac85-2bf653757c81"

        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"

# ------------------------------------------------------------------------------------------------------------------------------------------------

  /user_recordings/{user_recordings_id}:

    patch:
      tags:
      - Recordings
      summary: Update the status of a recording, for example to update how much time the user has watched.
      operationId: putRecordingRequest
      parameters:
        - in: path
          name: user_recordings_id
          description: The id of the user recordings
          schema:
            type: string
          example: cdf5b4f7-236c-4a3c-b848-9223ed816a0c
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/PatchDocument.yml#/PatchDocument"
            example:
              op: "replace"
              path: "/data/0/attributes/watched_time_seconds"
              value: 923
              from: null

      responses:
        204:
          description: |
            The resource was updated successfully, no response body is needed

    delete:
      tags:
      - Recordings
      summary: Delete a recording
      operationId: deleteUserRecording
      parameters:
        - in: path
          name: user_recordings_id
          description: The id of the recording
          schema:
            type: string
          example: cdf5b4f7-236c-4a3c-b848-9223ed816a0c
        - in: query
          name: delete_future_occurances
          description: >
            If the particular recording is part of a series then setting this parameter to "true" will cause
            all future occurances of the series to not be deleted.  In other words setting this parameter to
            "true" cancels the request for the whole series, not just the single episode.
            If this parameter is omitted it will default to "false"
          schema:
            type: string
            enum: [true,false]
          example: "true"

      responses:
        '204':
          description: |
            The resource was deleted successfully
# -------------------------------------------------------------------------------------------------------------------------------------------------
#  RECORDING GROUPS
# -------------------------------------------------------------------------------------------------------------------------------------------------

  /users/{user_id}/user_recording_requests/classification_tags:
    get:
      tags:
        - Recording Groups
      summary: Get a list of tags that have been created for recording requests
      operationId: getClassificationTagsForRecordingRequest
      parameters:
        - in: path
          name: user_id
          description: The user id
          schema:
            type: string
          example: 34d8a79d-d54a-4229-b560-572a65113e23
        - in: query
          name: filter
          required: false
          description: >
            By default this is true
            Example usage:  /user/{user_id}/user_recordings?filter[RecordingRequest.record_series_of_episodes]=true
          schema:
            type: boolean
            enum: [true,false]
          example: true
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                      - type
                      - id
                      properties:
                        type:
                          type: string
                          example: ClassificationTag
                        id:
                          type: string
                          example: ad0e718f-d1dc-4e67-81f9-8ff9a09490cd
                          description: >-
                            The id of the request entity
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/EnrichedMetadata/ClassificationTagEntity.yml#/ClassificationTagEntity"

  /classification_tags/{classification_tag_id}/user_recordings:
    get:
      tags:
      - Recording Groups
      summary: Get a list of recordings that are in a recording group
      operationId: getRecordingsInGroup
      parameters:
        - in: path
          name: classification_tag_id
          description: The id of the classification tag
          schema:
            type: string
          example: ad0e718f-d1dc-4e67-81f9-8ff9a09490cd
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                      - type
                      - id
                      properties:
                        type:
                          type: string
                          example: UserRecording
                        id:
                          type: string
                          example: d88a87f7-c636-4bcd-83b7-33e782480754
                          description: >-
                            The id of the request entity
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingEntity.yml#/UserRecordingEntity"


# -------------------------------------------------------------------------------------------------------------------------------------------------
# LEGACY SUPPORT
# -------------------------------------------------------------------------------------------------------------------------------------------------

  /user_recordings/{epg_id}/{continuous}:
    patch:
      tags:
      - Legacy support
      summary: (Deprecated) Update one or more attributes of an existing entity
      description: >-
        This can be used, for example, to reset the amount of time that a recording has been watched.
        Deprecated in favour of PATCH /user/{user_id}/user_recordings/{user_recordings_id}
      operationId: modifyRecordings
      parameters:
        - in: path
          name: user_id
          description: The user id to obtain recordings for
          required: true
          schema:
            type: string
        - in: path
          name: epg_id
          description: The epg id to obtain recordings for
          required: true
          schema:
            type: string
        - in: path
          name: continuous
          description: "The integer value of the continuous flag"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: >-
          The Recording entity to modify.  Note that you only have to provide the attributes that you want to change (this is a PATCH request) and that you cannot
          change the time that the recording expires.
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                data:
                  type: object
                  properties:
                    id:
                      type: integer
                    type:
                      type: string
                    attributes:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingEntity.yml#/UserRecordingEntity"

      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        description: "This will be a UserRecording entity"
                        example: UserRecording
                      id:
                        type: string
                        example: '{"user_id":1,"epg_id":749,"continuous":0}'
                      attributes:
                        $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingEntity.yml#/UserRecordingEntity"

        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"

# -------------------------------------------------------------------------------------------------------------------------------------------------

  /user/{user_id}/previously_started_user_recordings:
    get:
      tags:
      - Legacy support
      summary: This endpoint will be deprecated soon and it is not recommended to build new systems using it.
      description: >-
        This endpoint will be deprecated soon and it is not recommended to build new systems using it.
        Note: Many of the keys in the recording entity are not mandatory and only the mandatory keys can be relied upon.
      operationId: "getStartedRecordings"
      parameters:
        - in: query
          name: maxItems
          description: How many items must be returned.  Valid values are in the set [20, 50, 100].
          required: true
          schema:
            type: integer
        - in: path
          name: user_id
          description: The user id to obtain recordings for
          required: true
          schema:
            type: integer
            format: "int64"

      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "https:\/\/boox.fi\/api\/recordings\/v1\/user\/1\/recording?sort_field=name&sort_direction=DESC&page=2"
                      first:
                        type: string
                        description: "The fully qualified url of the first page in the collection"
                        example: "https:\/\/boox.fi\/api\/recordings\/v1\/user\/1\/recording?sort_field=name&sort_direction=DESC&page=1"
                      last:
                        type: string
                        description: "The fully qualified url of the last page in the collection"
                        example: "https:\/\/boox.fi\/api\/recordings\/v1\/user\/1\/recording?sort_field=name&sort_direction=DESC&page=4"
                      next:
                        type: string
                        description: "The fully qualified url of the next page of data in the collection"
                        example: "https:\/\/boox.fi\/api\/recordings\/v1\/user\/1\/recording?sort_field=name&sort_direction=DESC&page=3"
                      prev:
                        type: string
                        description: "The fully qualified url of the prev page of data in the collection"
                        example: "https:\/\/boox.fi\/api\/recordings\/v1\/user\/1\/recording?sort_field=name&sort_direction=DESC&page=1"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          description: This will be a UserRecording entity
                          example: UserRecording
                        id:
                          type: integer
                          format: int64
                          description: The id of the entity being referenced
                          example: '{"user_id":1,"epg_id":749,"continuous":0}'
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingEntity.yml#/UserRecordingEntity"
                        relationships:
                          type: object
                          properties:
                            recording:
                              type: array
                              items:
                                type: object
                                properties:
                                  links:
                                    type: object
                                    properties:
                                      self:
                                        type: string
                                      stream:
                                        type: string
                                  data:
                                    type: object
                                    properties:
                                      type:
                                        type: string
                                        example: Recording
                                      id:
                                        type: integer
                                        example: 123
                                      attributes:
                                        type: object
                                        properties:
                                          status:
                                            type: string
                                            example: "deployed"
                                          stream:
                                            type: object
                                            properties:
                                              bitrate:
                                                type: string
                                              type:
                                                type: string
                                              protocol:
                                                type: string
                            epg:
                              type: object
                              properties:
                                links:
                                  type: object
                                  properties:
                                    self:
                                      type: string
                                      example: "<domain>/api/v3/user/<userEmail>/epg/<programUId>"
                                      description: "EPG V3 - Program Details"
                                    thumbnail:
                                      type: string
                                      description: "The thumbnail url"
                                data:
                                  $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/Schedule/EPGEntity.yml#/EPGEntity"

        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"

# -------------------------------------------------------------------------------------------------------------------------------------------------
