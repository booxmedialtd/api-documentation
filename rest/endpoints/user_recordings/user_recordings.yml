openapi: 3.0.0
info:
  description: >-
    If a User has the "Record" access for a Channel then they are able to request that we record a Program for them from that Channel.
    A Recording should start off as a request.  A User may request that an entire series be recorded in which case the recording script will create requests on behalf of the User.
    Once the Program has finished Recording is is marked as available.
    Currently the identity of this Entity is a combination of the User and the EPG item that were recorded.  This introduces implicit relationships between other entities (for example EPG item must be unique across all Channel)
    The plan is that when User Recording is separated into its own component as part of the Recording service it will be given its own independent identity.
  version: "1.0.0"
  title: "User recording"
tags:
- name: Recording Requests
    Recording requests are requests for us to record a specific program.  They will be replaced with the new tag based recording system in due course.
- name: Recordings
  description: >-
    Recordings are programs that the user has asked to be recorded and which have been marked by the media backend as having been completed
- name: "User Recording Tags"
  description: >-
    In the future content will be tagged.  The system will record content for a user that is tagged up with whatever the user indicates they are interested in.
    Currently the "tagging" process is mocked up by looking exclusively at the program title.  This endpoint structure is unlikely to change when the system is improved.
servers:
- url: 'https://demo.aminocom.com/api/recordings/v1/'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
- bearerAuth: []         # use the same name as above
paths:


  /user/{user_id}/user_recording_requests/:
    get:
      tags:
      - Recording Requests
      summary: Get an index of user recording request entities      
      operationId: indexRecordingRequests
      parameters:
        - in: path
          name: user_id
          description: The user id to obtain recordings for
          required: true
          schema:
            type: string
        - in: query
          name: page_number
          required: false
          description: >
            The page number (100 results per page) of results to retrieve.  If this parameter is ommitted then it is assumed to be 1 (not zero based, 1 means the first page)
          schema:
            type: integer
        - in: query
          name: filter
          required: false
          description: >
            Only the following filters are supported: [future]
            Example usage:  /user/{user_id}/user_recordings?filter[status]=WAITING
            Note: We do not support filtering on all of the statuses and only allow the client to specify that it
            wants only requests which have not been recorded (or failed).
          schema:
            type: string
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                      - type
                      - id
                      properties:
                        type:
                          type: string
                          example: UserRecordingRequest
                        id:
                          type: string
                          example: 24369947-8d46-4453-bdc2-9e1d88c220ff
                          description: >-
                            The id of the request entity
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingRequestEntity.yml#/UserRecordingRequestEntity"                  
        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"


# -------------------------------------------------------------------------------------------------------------------------------------------------

  /user/{user_id}/user_recordings/:
    get:
      tags:
      - Recordings
      summary: Get an index of user recording entities
      description:  >-
        NOTE:  This endpoint will *always* include [Program] relationships and DOES NOT support the `included` parameter.
        The default sort order is by time of broadcast descending.
      operationId: indexRecordings
      parameters:
        - in: path
          name: user_id
          description: The user id to obtain recordings for
          required: true
          schema:
            type: string
        - in: query
          name: page_number
          required: false
          description: >
            The page number (100 results per page) of results to retrieve.  If this parameter is ommitted then it is assumed to be 1 (not zero based, 1 means the first page)
          schema:
            type: integer
        - in: query
          name: filter
          required: false
          description: >
            Only the following filters are supported: [expiring]
            Example usage:  /user/{user_id}/user_recordings?filter[expiring]=X
            The value supplied is the number of days in the future that determines whether a record should be included in the result set.
            Only the following values are accepted [today|3|7|30] and if an invalid value is given a 400 error will be returned.
            Days must be calculated using the server timezone and should include time from 00:00:00 to 23:59:59 (in other words be rounded
            to a whole day rather than using the time of the request).
            Only a single value may be supplied.
            This response must be privately cached until midnight of the day it was first made.       
          schema:
            type: string
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                      - type
                      - id
                      properties:
                        type:
                          type: string
                          example: UserRecording
                        id:
                          type: string
                          example: '{"user_id":1,"epg_id":749,"continuous":0}'
                          description: >-
                            The example gets parsed to display like an object.  The id of the recording itself.  This is a JSON string at the moment because we are using a composite primary key to model this entity identity.  In the near future this will become a standard UUID.
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingEntity.yml#UserRecordingEntity"
                  included:
                    type: array
                    description: "This key MUST NOT be included if the `included` parameter is not used in the request URL"
                    items:
                      type: object
                      description: "Note that different sorts of entity may be included (this array is not guaranteed to be homogenous), but the Swagger definition does not allow including more than one example of an item of an array so only one type is shown."
                      properties:
                        type:
                          type: string
                          example: "Program"
                          description: The type of the entity that is being included.  It will always be [Program] in this endpoint.
                        id:
                          type: string
                          example: "d0de0088-3141-439e-8455-839bdb8f6cec"
                        attributes:
                            $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/EnrichedMetadata/ProgramEntity.yml#ProgramEntity"
        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"

# -------------------------------------------------------------------------------------------------------------------------------------------------

  /user/{user_id}/user_recordings/{user_recordings_id}/streams:
    get:
      tags:
      - Recordings
      summary: Get an index of the playable streams that are associated with a particular user recording.
      description: >-
        Note: We do not currently allow the client to filter on stream attributes (such as on suggested device or quality)
      operationId: indexUserRecordingStreams
      parameters:
        - in: path
          name: user_id
          description: The user id to obtain recordings for
          required: true
          schema:
            type: string
        - in: path
          name: user_recordings_id
          description: The id of the user_recording to obtain playable for.  This is an ugly JSON string while we transition from our legacy API's to our new domain driven modeling.  It will become a UUID in due course.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                      - type
                      - id
                      properties:
                        id:
                          type: integer
                          example: 123
                        type:
                          type: string
                          example: Stream
                        attributes:
                          type: array
                          items:
                            $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/Media/StreamEntity.yml#StreamEntity"
        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"

# -------------------------------------------------------------------------------------------------------------------------------------------------

  /user/{user_id}/user_recordings/{epg_id}/{continuous}:
    patch:
      tags:
      - Recordings
      summary: Update one or more attributes of an existing entity
      description: This can be used, for example, to reset the amount of time that a recording has been watched.
      operationId: modifyRecordings
      parameters:
        - in: path
          name: user_id
          description: The user id to obtain recordings for
          required: true
          schema:
            type: string
        - in: path
          name: epg_id
          description: The epg id to obtain recordings for
          required: true
          schema:
            type: string
        - in: path
          name: continuous
          description: "The integer value of the continuous flag"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: >-
          The Recording entity to modify.  Note that you only have to provide the attributes that you want to change (this is a PATCH request) and that you cannot
          change the time that the recording expires.
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                data:
                  type: object
                  properties:
                    id:
                      type: integer
                    type:
                      type: string
                    attributes:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingEntity.yml#UserRecordingEntity"

      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        description: "This will be a UserRecording entity"
                        example: UserRecording
                      id:
                        type: string
                        example: '{"user_id":1,"epg_id":749,"continuous":0}'
                      attributes:
                        $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingEntity.yml#UserRecordingEntity"

        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"

# -------------------------------------------------------------------------------------------------------------------------------------------------

  /user/{user_id}/previously_started_user_recordings:
    get:
      tags:
      - Recordings
      summary: This endpoint will be deprecated soon and it is not recommended to build new systems using it.
      description: >-
        This endpoint will be deprecated soon and it is not recommended to build new systems using it.
        Note: Many of the keys in the recording entity are not mandatory and only the mandatory keys can be relied upon.
      operationId: "getStartedRecordings"
      parameters:
        - in: query
          name: maxItems
          description: How many items must be returned.  Valid values are in the set [20, 50, 100].
          required: true
          schema:
            type: integer
        - in: path
          name: user_id
          description: The user id to obtain recordings for
          required: true
          schema:
            type: integer
            format: "int64"

      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "https:\/\/boox.fi\/api\/recordings\/v1\/user\/1\/recording?sort_field=name&sort_direction=DESC&page=2"
                      first:
                        type: string
                        description: "The fully qualified url of the first page in the collection"
                        example: "https:\/\/boox.fi\/api\/recordings\/v1\/user\/1\/recording?sort_field=name&sort_direction=DESC&page=1"
                      last:
                        type: string
                        description: "The fully qualified url of the last page in the collection"
                        example: "https:\/\/boox.fi\/api\/recordings\/v1\/user\/1\/recording?sort_field=name&sort_direction=DESC&page=4"
                      next:
                        type: string
                        description: "The fully qualified url of the next page of data in the collection"
                        example: "https:\/\/boox.fi\/api\/recordings\/v1\/user\/1\/recording?sort_field=name&sort_direction=DESC&page=3"
                      prev:
                        type: string
                        description: "The fully qualified url of the prev page of data in the collection"
                        example: "https:\/\/boox.fi\/api\/recordings\/v1\/user\/1\/recording?sort_field=name&sort_direction=DESC&page=1"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          description: This will be a UserRecording entity
                          example: UserRecording
                        id:
                          type: integer
                          format: int64
                          description: The id of the entity being referenced
                          example: '{"user_id":1,"epg_id":749,"continuous":0}'
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingEntity.yml#UserRecordingEntity"
                        relationships:
                          type: object
                          properties:
                            recording:
                              type: array
                              items:
                                type: object
                                properties:
                                  links:
                                    type: object
                                    properties:
                                      self:
                                        type: string
                                      stream:
                                        type: string
                                  data:
                                    type: object
                                    properties:
                                      type:
                                        type: string
                                        example: Recording
                                      id:
                                        type: integer
                                        example: 123
                                      attributes:
                                        type: object
                                        properties:
                                          status:
                                            type: string
                                            example: "deployed"
                                          stream:
                                            type: object
                                            properties:
                                              bitrate:
                                                type: string
                                              type:
                                                type: string
                                              protocol:
                                                type: string
                            epg:
                              type: object
                              properties:
                                links:
                                  type: object
                                  properties:
                                    self:
                                      type: string
                                      example: "<domain>/api/v3/user/<userEmail>/epg/<programUId>"
                                      description: "EPG V3 - Program Details"
                                    thumbnail:
                                      type: string
                                      description: "The thumbnail url"
                                data:
                                  $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/Schedule/EPGEntity.yml#EPGEntity"

        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"

# -------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------

  /user/{user_id}/user_recording_tags/:
    get:
      tags:
      - "User Recording Tags"
      summary: Get an index of User Recording Tags
      description:  >-
        The default sort order is by natural database order (i.e: unsorted)
      operationId: indexRecordingTags
      parameters:
        - in: path
          name: user_id
          description: The user id to obtain recording tags for
          required: true
          schema:
            type: string
        - in: query
          name: page_number
          required: false
          description: >
            The page number (100 results per page) of results to retrieve.  If this parameter is ommitted then it is assumed to be 1 (not zero based, 1 means the first page)
          schema:
            type: integer
        - in: query
          name: language
          required: false
          description: >-
            The PK of the language to use, which will be a 3 character ISO 639-2 string (e.g.: fin).
            If this is omitted the browser 'Accept-Language' will be used if it is available, and otherwise the system defined default.
            If the requested language is not available then the system will return translations in order of the system defined preferences"
          schema:
            type: string
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                      - type
                      - id
                      properties:
                        type:
                          type: string
                          example: UserRecordingTag
                        id:
                          type: string
                          example: 1a31deef-a775-4af4-af2a-92c97db41778
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/UserRecordingTagEntity.yml#UserRecordingTagEntity"
        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"

# -------------------------------------------------------------------------------------------------------------------------------------------------


  /user/{user_id}/relationships/user_recording_tags/{tag_id}:
    post:
      tags:
      - "User Recording Tags"
      summary: Create a new relationship between user and tag
      operationId: createRecordingTag
      parameters:
        - in: path
          name: user_id
          description: The user id to add a tag for
          required: true
          schema:
            type: string
        - in: path
          name: tag_id
          description: The tag id to connect to the user
          required: true
          schema:
            type: string

      responses:
        '201':
          description: "Successful response"
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"

    delete:
      tags:
      - "User Recording Tags"
      summary: Delete a relationship between the user and the tag
      operationId: deleteRecordingTag
      parameters:
        - in: path
          name: user_id
          description: The user id to delete a tag from
          required: true
          schema:
            type: string
        - in: path
          name: tag_id
          description: The tag id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Successful response"
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"