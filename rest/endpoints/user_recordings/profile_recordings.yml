openapi: 3.0.0
info:
  version: "4.0.0"
  title: "Profile recording"
tags:
  - name: Recordings
    description: >-
      A recording represents a broadcast slot that the user wants to have recorded.
      A Recording may or may not be available for viewing, depending of whether the broadcast slot has been successfully recorded.
  - name: Automated Recording Requests
    description: >-
      An Automated Recording Request represents a request by a user to automatically record specific broadcast slots for them as they become available.
  - name: Recording Groups
    description: >-
      Recording Groups are groups of Recordings available for viewing, typically a Series.
servers:
  - url: 'https://demo.aminocom.com/api/recordings/v4/'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
  - bearerAuth: []         # use the same name as above

paths:
  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  # RECORDINGS
  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user_profiles/{user_profile_id}/recordings:
    get:
      description: |
        * **Available since:** 2020-01 (BPLAT-12427)
      summary: Search for recordings of a given user profile.
      tags:
        - Recordings
      operationId: searchRecordedSlots
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to fetch recording groups for.
          schema:
            type: string
        - in: query
          name: page[number]
          required: false
          description: Please see https://jsonapi.org/profiles/ethanresnick/cursor-pagination. Ex. page[number]=1. Default = 1
          schema:
            type: integer
        - in: query
          name: page[size]
          required: false
          description: Please see https://jsonapi.org/profiles/ethanresnick/cursor-pagination. Ex. page[size]=100. Default = 100
          schema:
            type: integer
        - in: query
          name: language
          description: >-
            The PK of the language to use, which will be a 3 character ISO 639-2 string (e.g.: fin).
            If this is omitted the system defined default will be used. If the requested language is not available
            then the system will return translations in order of the system defined preferences
          required: false
          schema:
            type: string
        - in: query
          name: filter[search]
          description: Supports search by title keywords, when no search string provided, API returns all the recorded slots for the requested user_profile_id.
          required: false
          schema:
            type: string
        - in: query
          name: filter[starts_before]
          description: Include only recordings having broadcast start time before specified time (in Unix timestamp).
          example: 1526648593
          schema:
            type: integer
        - in: query
          name: filter[starts_after]
          required: false
          description: Include only recordings having broadcast start time after specified time (in Unix timestamp).
          example: 1526648593
          schema:
            type: integer
        - in: query
          name: filter[ends_before]
          required: false
          description: Include only recordings having broadcast end time before specified time (in Unix timestamp).
          example: 1526648593
          schema:
            type: integer
        - in: query
          name: filter[ends_after]
          required: false
          description: Include only recordings having broadcast end time after specified time (in Unix timestamp).
          example: 1526648593
          schema:
            type: integer
        - in: query
          name: filter[series_id]
          required: false
          description: Consider only recordings having the same series_id.
          example: "abdf8785-cb23-445b-946f-69e8770500a1"
          schema:
            type: string
            nullable: true
        - in: query
          name: filter[channel_id]
          required: false
          description: Consider only recordings having the same channel_id.
          example: "abdf8785-cb23-445b-946f-69e8770500a1"
          schema:
            type: string
        - in: query
          name: sort
          description: >-
            Please see http://jsonapi.org/format/#fetching-sorting
            Specifies sorting of the results. If sort field is prepended with a minus sign, the order is descending. Default is ascending by `created_at` field.
            The following are attributes to sort on: [created_at|broadcast_slots.start_time_unix]
          required: false
          schema:
            type: string
      responses:
        200:
          description: "Successful response on updated resource"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/RecordingEntity.yml#/RecordingEntity"
        403:
          description: Client attempts to fetch the recordings of a un-authenticated user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ForbiddenEntity.yml#/ForbiddenError"

    post:
      description: |
        * **Available since:** 2019-11 (BPLAT-12079)
      summary: Create a recording of a given broadcast slot for a given user profile
      tags:
        - Recordings
      operationId: createRecordedSlot
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to create recording groups for.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/RecordingEntity.yml#/CreateRecordingRequestEntity"

      responses:
        201:
          description: "Successful response on created resource"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/RecordingEntity.yml#/RecordingEntity"

        403:
          description: |
            Recording was rejected. Possible reasons include:
            - Requested broadcast slot is not recordable
            - Requested channel is not recordable
            - User lacks sufficient license to record requested broadcast slot
            - User lacks sufficient storage space to record requested broadcast slot
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/JsonApiErrorEntity.yml#/JsonApiErrorEntity"
              example:
                errors:
                  - id: "934dc960-a733-409f-a000-c112b64c8553"
                    status: "403"
                    code: "30302"
                    title: "Forbidden"
                    detail: "Broadcast slot with ID \"97e2dd12-01fd-11ea-b90b-a310cb9651f4\" is not recordable"
        409:
          description: Recording was rejected because a recording already exists for the given user profile for the given program
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/JsonApiErrorEntity.yml#/JsonApiErrorEntity"
              example:
                errors:
                  - id: "934dc960-a733-409f-a000-c112b64c8553"
                    status: "409"
                    code: "30307"
                    title: "Recording already exists"
                    detail: "Could not create recording because a recording for user profile \"c5a80fac-0f80-11ea-92e8-1988e85f4ee1\" for program with ID \"c5c4078e-0f80-11ea-9295-27992502e07a\" already exists"

  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user_profiles/{user_profile_id}/recordings/{recording_id}:
    patch:
      description: |
        * **Available since:** 2020-1 (BPLAT-12080)
      tags:
        - Recordings
      summary: Update a recording of a given broadcast slot for a given user profile
      operationId: updateRecordedSlot
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to which the recording belongs.
          schema:
            type: string
        - in: path
          name: recording_id
          required: true
          description: The identity of the recording that will be updated.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/RecordingEntity.yml#/UpdateRecordingRequestEntity"
      responses:
        200:
          description: "Successful response on updated resource"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/RecordingEntity.yml#/RecordingEntity"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/JsonApiErrorEntity.yml#/JsonApiErrorEntity"
              example:
                errors:
                  - id: "2d3ba0ea-0aca-11ea-b2d0-4bc6fcad2537"
                    status: "400"
                    code: "10100"
                    title: "Bad Request"
                    detail: "- is_favourite must be a boolean"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/JsonApiErrorEntity.yml#/JsonApiErrorEntity"
              example:
                errors:
                  - id: "2d3ba0ea-0aca-11ea-b2d0-4bc6fcad2537"
                    status: "404"
                    code: "30305"
                    title: "Not found"
                    detail: "Recording with id \"95b39b14-0aca-11ea-98df-bd321dcc0d5b\" cannot be found."

    delete:
      tags:
        - Recordings
      summary: Delete one given recording for a given user profile.
      description: |
        * **Available since:** 2019-11 (BPLAT-12081)
      operationId: deleteRecordedSlot
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to delete a recording for (UUID).
          schema:
            type: string
        - in: path
          name: recording_id
          required: true
          description: The identity of the recording to delete (UUID).
          schema:
            type: string
      responses:
        204:
          description: The recording was successfully deleted. No response body returned.

  /user_profiles/{user_profile_id}/recordings/batch_delete_recordings:
    post:
      description: |
        * **Available since:** 2020-01 (BPLAT-12082)
      tags:
        - Recordings
      summary: Delete all given recordings for the given profile, up to a maximum of 50 recordings.
      operationId: batchDeleteRecordedSlots
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to delete the recordings for (UUID).
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/vnd.api+json; ext=bulk:
            schema:
              $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/BatchDeleteRequestEntity.yml#/BatchDeleteRequestEntity"
      responses:
        204:
          description: The recordings were successfully deleted. No response body returned.
        404:
          description: At least one of the recordings was not found under the given user profile. None of the recordings was deleted.
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/JsonApiErrorEntity.yml#/JsonApiErrorEntity"
              example:
                errors:
                  - id: "934dc960-a733-409f-a000-c112b64c8553"
                    status: "404"
                    code: "30309"
                    title: "Not Found"
                    detail: "Recordings with id \"f826091a-1102-11ea-b8a0-35120745a64c\",\"f826aa78-1102-11ea-98f1-d56eb8e1dafc\",\"f827360a-1102-11ea-be52-39ecefb436af\" cannot be found."
        400:
          description: |
            A requirement for the request was not met. None of the recordings should be deleted. Possible reasons include:
             - The list of recordings to delete is missing
             - The list of recordings to delete is empty
             - The list of recordings to delete contains more than 50 id's
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/JsonApiErrorEntity.yml#/JsonApiErrorEntity"
              example:
                errors:
                  - id: "934dc960-a733-409f-a000-c112b64c8553"
                    status: "400"
                    code: "3231"
                    title: "Bad Request"
                    detail: "The number of recordings that is requested to be deleted exceeds the limit of 50"
        500:
          description: |
            Something went wrong while trying to delete the recordings. None of the recordings should be deleted.
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/JsonApiErrorEntity.yml#/JsonApiErrorEntity"
              example:
                errors:
                  - id: "934dc960-a733-409f-a000-c112b64c8553"
                    status: "500"
                    code: "30302"
                    title: "Internal Server Error"
                    detail: "Something went wrong while trying to delete the recordings."
  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user_profiles/{user_profile_id}/recorded_broadcast_slots:
    get:
      description: |
        * **Available since:** 2020-1 (BPLAT-12400)
      tags:
        - Recordings
      summary: Fetch all recorded broadcast slots for a given user profile
      operationId: recordedBroadcastSlots
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to which the recordings belongs.
          schema:
            type: string
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                        - type
                        - id
                      properties:
                        type:
                          type: string
                          example: BroadcastSlot
                        id:
                          type: string
                          description: "The id of the entity being referenced"
                          example: "84eb61a9-75d4-42c7-8c15-84c3d7776227"
        403:
          description: Client attempts to fetch the recordings of a un-authenticated user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ForbiddenEntity.yml#/ForbiddenError"

  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user_profiles/{user_profile_id}/recorded_broadcast_slots/{broadcast_slot_id}:
    get:
      description: |
        * **Available since:** 2021-2 (BPLAT-14510)
      summary: Fetch a single recording with a given user profile ID and broadcast slot ID
      tags:
        - Recordings
      operationId: getRecordingByBroadcastSlotId
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to fetch recording.
          schema:
            type: string
        - in: path
          name: broadcast_slot_id
          required: true
          description: The identity of the broadcast slot to fetch recording.
          schema:
            type: string
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/RecordingEntity.yml#/RecordingEntity"
        403:
          description: Client not authorized to access content.
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ForbiddenEntity.yml#/ForbiddenError"
                example:
                  errors:
                    - id: "fc82b838-75dc-11eb-9874-1d8ad1347229"
                      status: "403"
                      code: "0523AC"
                      title: "Forbidden"
                      detail: "You are not authorized to access that resource."
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/JsonApiErrorEntity.yml#/JsonApiErrorEntity"
              example:
                errors:
                  - id: "fc82b838-75dc-11eb-9874-1d8ad1347229"
                    status: "404"
                    code: "30308"
                    title: "Not found"
                    detail: "Recording with Broadcast slot ID \"cf7df6d6-75e6-11eb-9439-0242ac130002\" and User profile ID \"cf7df974-75e6-11eb-9439-0242ac130002\" not found"

  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user/{user_id}/storage_quota:
    get:
      description: |
        * **Available since:** 2020-1 (BPLAT-12326)
      tags:
        - Recordings
      summary: Fetch used and total available recordings storage quota in seconds
      operationId: storageQuota
      parameters:
        - in: path
          name: user_id
          required: true
          description: The identity of the user to which the quota belongs to.
          schema:
            type: string
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - id
                    properties:
                      type:
                        type: string
                        example: StorageQuota
                      id:
                        type: string
                        description: "The id of the entity being referenced"
                        example: "42"
                      attributes:
                        type: object
                        properties:
                          used_quota:
                            type: integer
                            description: "Total duration of quota used in seconds"
                            example: 100
                          total_quota:
                            type: integer
                            description: "Total storable duration of quota in seconds"
                            example: 1000000
        403:
          description: Client attempts to fetch the quota of an un-authenticated user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ForbiddenEntity.yml#/ForbiddenError"

  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /most_popular/{period}:
    get:
      description: |
        * **Available since:** 2020-01 (BPLAT-12223)
      summary: Get most popular recordings
      tags:
        - Recordings
      operationId: getMostPopularBroadcastSlots
      parameters:
        - in: path
          name: period
          required: true
          description: Period to list recordings from. Valid options include 'today', 'next_week'
          schema:
            type: string
        - in: query
          name: language
          description: >-
            A 3 character ISO 639-2 string (e.g.: fin) specifying the requested language to use in the response.
            If this is omitted the system defined default will be used. If the requested language is not available
            then the system will return translations in order of the system defined preferences
          required: false
          schema:
            type: string
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "../../snippets/Epg/BroadcastSlotEntity.yml#/BroadcastSlotEntity"

  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  # AUTOMATED RECORDING REQUESTS
  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user_profiles/{user_profile_id}/auto_recording_requests:
    get:
      description: |
        * **Available since:** 2020-02 (BPLAT-12072)
      summary: An index of all of the auto recording requests for a specific user profile
      tags:
        - Automated Recording Requests
      operationId: indexRecordingRequests
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to fetch recording groups for.
          schema:
            type: string
        - in: query
          name: page[number]
          required: false
          description: Please see https://jsonapi.org/profiles/ethanresnick/cursor-pagination. Only page number is supported at the moment. Ex. page[number]=1. Default = 1
          schema:
            type: integer
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "../../snippets/UserRecordings/AutoRecordingRequestEntity.yml#/RecordingRequestEntity"

    post:
      description: |
        * **Available since:** 2020-02 (BPLAT-12073)
      summary: Create automated recording request for a given user profile, series and channel
      tags:
        - Automated Recording Requests
      operationId: createRecordingRequest
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to create recording request for.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "../../snippets/UserRecordings/AutoRecordingRequestEntity.yml#/CreateAutoRecordingRequestEntity"
      responses:
        201:
          description: "Successful response on created resource"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    $ref: "../../snippets/UserRecordings/AutoRecordingRequestEntity.yml#/RecordingRequestEntity"
        403:
          description: |
            User auto recording request was rejected. Possible reasons include:
            - Requested channel is not recordable
            - User lacks sufficient license to record requested channel
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/JsonApiErrorEntity.yml#/JsonApiErrorEntity"
              example:
                errors:
                  - id: "934dc960-a733-409f-a000-c112b64c8553"
                    status: "403"
                    code: "30303"
                    title: "Forbidden"
                    detail: "Channel with id \"42\" is not recordable"
        409:
          description: User auto recording request was rejected because same recording request already exists for the given user profile, series and channel
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/JsonApiErrorEntity.yml#/JsonApiErrorEntity"
              example:
                errors:
                  - id: "934dc960-a733-409f-a000-c112b64c8553"
                    status: "409"
                    code: "30308"
                    title: "Recording request already exists"
                    detail: "Could not create recording request because it already exists for user profile \"282cf6fc-5238-11ea-938e-296a836025b0\", series id \"284a265a-5238-11ea-87cc-83904c78ff0d\", channel id \"42\""

  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user_profiles/{user_profile_id}/auto_recording_requests/{recording_request_id}:
    patch:
      description: |
        * **Available since:** 2020-02 (BPLAT-12075)
      summary: Update one or more attributes of an automated recording request for a given user profile
      tags:
        - Automated Recording Requests
      operationId: updateRecordingRequests
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: ID of the user profile to patch the automated recording request.
          schema:
            type: string
        - in: path
          name: recording_request_id
          required: true
          description: The identity of the recording request
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "../../snippets/UserRecordings/AutoRecordingRequestEntity.yml#/PatchRecordingRequestEntity"
      responses:
        204:
          description: |
            The resource was updated successfully, no response body is needed

    delete:
      description: |
        * **Available since:** 2020-02 (BPLAT-12074)
      summary: Delete automated recording request for a given user profile
      tags:
        - Automated Recording Requests
      operationId: deleteRecordingRequests
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: ID of the user profile to delete the automated recording request from.
          schema:
            type: string
        - in: path
          name: recording_request_id
          required: true
          description: The identity of the recording request
          schema:
            type: string
      responses:
        204:
          description: |
            The resource was updated successfully, no response body is needed

  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  # RECORDING GROUPS
  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user_profiles/{user_profile_id}/recordings/recording_groups:
    get:
      description: |
        * **Available since:** 2019-11 (BPLAT-12048)
      summary: An index of all of the recording groups for a specific user profile
      tags:
        - Recording Groups
      operationId: indexRecordingGroups
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to fetch recording groups for.
          schema:
            type: string
        - in: query
          name: page[number]
          required: false
          description: Please see https://jsonapi.org/profiles/ethanresnick/cursor-pagination. Only page number is supported at the moment. Ex. page[number]=1. Default = 1
          schema:
            type: integer
        - in: query
          name: language
          description: >-
            The PK of the language to use, which will be a 3 character ISO 639-2 string (e.g.: fin).
            If this is omitted the system defined default will be used. If the requested language is not available
            then the system will return translations in order of the system defined preferences
          required: false
          schema:
            type: string
        - in: query
          name: filter[is_favourite]
          description: Return only recordings with specificed favourite flag.
          schema:
            type: string
            enum:
              - true
              - false
              - 1
              - 0
        - in: query
          name: filter[starts_before]
          description: Consider only recordings having broadcast start time before specified time (in Unix timestamp) in the groups.
          example: 1526648593
          schema:
            type: integer
        - in: query
          name: filter[starts_after]
          description: Consider only recordings having broadcast start time after specified time (in Unix timestamp) in the groups.
          example: 1526648594
          schema:
            type: integer
        - in: query
          name: filter[ends_before]
          description: Consider only recordings having broadcast end time before specified time (in Unix timestamp) in the groups.
          example: 1526648595
          schema:
            type: integer
        - in: query
          name: filter[ends_after]
          description: Consider only recordings having broadcast end time after specified time (in Unix timestamp) in the groups.
          example: 1526648596
          schema:
            type: integer
        - in: query
          name: group_by
          required: false
          description: >-
            Accept values "series_id,channel_id" as well as both combined. By default, recordings will be grouped by series_id
          example: "https://demo.aminocom.com/api/recordings/v4/user_profiles/{user_profile_id}/recordings/recording_groups?group_by=series_id,channel_id"
          schema:
              type: string

      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/RecordingGroupEntity.yml#/RecordingGroupEntity"
                  included:
                    type: array
                    items:
                      anyOf:
                        - $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/EnrichedMetadata/SeriesEntity.yml#/SeriesEntity"
                        - $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/EnrichedMetadata/ChannelV4Entity.yml#/ChannelEntity"

  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user_profiles/{user_profile_id}/recordings/recording_groups/{recording_group_id}/recordings:
    get:
      description: |
        * **Available since:** 2019-11 (BPLAT-10674)
      summary: An index of the recordings for a specific recording group. This endpoint will be deprecated soon and it is not recommended to build new systems using it.
      tags:
        - Recording Groups
      operationId: getRecordingsForGroup
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to fetch recording groups for.
          schema:
            type: string
        - in: path
          name: recording_group_id
          required: true
          description: The identity of the recording group to fetch recordings for.
          schema:
            type: string
        - in: query
          name: page[number]
          required: false
          description: Please see https://jsonapi.org/profiles/ethanresnick/cursor-pagination. Only page number is supported at the moment. Ex. page[number]=1. Default = 1
          schema:
            type: integer
        - in: query
          name: filter
          description: >-
            Please see http://jsonapi.org/recommendations/#filtering. The following are attributes to filter on: [is_favourite]
            Accepted values for the "is_favourite" filter: "true", "false", "1", "0"
          schema:
            type: string
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/RecordingEntity.yml#/RecordingForGroupEntity"
                  included:
                    type: array
                    items:
                      $ref: "../../snippets/Epg/BroadcastSlotEntity.yml#/BroadcastSlotEntity"

  # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /user_profiles/{user_profile_id}/recordings/recording_groups/ungrouped/recordings:
    get:
      description: |
        * **Available since:** 2020-01 (BPLAT-12084)
      summary: An index of the recordings for a ungrouped recording. This endpoint will be deprecated soon and it is not recommended to build new systems using it.
      tags:
        - Recording Groups
      operationId: indexUngroupedRecordingGroupRecordings
      parameters:
        - in: path
          name: user_profile_id
          required: true
          description: The identity of the user profile to fetch recording groups for.
          schema:
            type: string
        - in: query
          name: page[number]
          required: false
          description: Please see https://jsonapi.org/profiles/ethanresnick/cursor-pagination. Only page number is supported at the moment. Ex. page[number]=1. Default = 1
          schema:
            type: integer
        - in: query
          name: filter
          description: >-
            Please see http://jsonapi.org/recommendations/#filtering. The following are attributes to filter on: [is_favourite]
            Accepted values for the "is_favourite" filter: "true", "false", "1", "0"
          schema:
            type: string
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/UserRecordings/RecordingEntity.yml#/RecordingForGroupEntity"
                    example:
                      - type: "Recording"
                        id: "dd89f23b-d177-4168-b02d-48426f023845"
                        attributes:
                          is_favorite: true
                          is_stream_available: true
                        relatioships:
                          broadcast_slot:
                            data:
                              type: "BroadcastSlot"
                              id: "f0e52ad6-a790-44a9-8885-61f66c7ebec8"
                          auto_recording_request:
                            data: null
                          program:
                            data:
                              type: "Program"
                              id: "08941424-d864-4cc7-b66a-b0c9568494cf"
                          series:
                            data: null
                  included:
                    type: array
                    items:
                      $ref: "../../snippets/Epg/BroadcastSlotEntity.yml#/BroadcastSlotEntity"
