openapi: 3.0.0
info:
  description: >-
    Authentication is the process or action of proving or showing something to be true, genuine, or valid.
  version: 1.0.0
  title: Authentication
tags:
- name: User Authentication
servers:
- url: 'https://demo.aminocom.com/api/auth/v1/'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
- bearerAuth: []         # use the same name as above
paths:

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


  /users/{user_id}/access_token:
    post:
      summary: |
        Create an access token that can be used to authenticate to the API.  Note that there is no session involved,
        the API is stateless and the access token needs to be presented with every call.
      tags:
      - User Authentication
      operationId: createAccessToken
      parameters:
        - in: path
          name: user_id
          required: true
          description: The user identity (please do not use an email address to identify the user)
          schema:
            type: string

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - authentication_mechanism
              - credentials
              properties:
                authentication_mechanism:
                  type: string
                  example: jwt
                  description: Any of the (case-insensitive) strings [entone|password|token]
                  enum: [entone|password|token]
                credentials:
                  type: object
                  properties:
                    entone_token:
                      type: string
                      description: >-
                        A valid (see documentation for validity rules) JWT token that minimally has the user identity as the "sub" claim.
                        This key will be supplied only if the authentication_mechanism is "entone"
                      example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJFbmFibGVTVEIiLCJpYXQiOjE1MzE4MzQyNDEsImV4cCI6MTU2MzM3MDI0MSwiYXVkIjoid3d3LmFtaW5vY29tLmNvbSIsInN1YiI6ImFuZHkuYmVha0BhbWlub2NvbS5jb20ifQ.jtTwO3YEyXmEf5XjjxUK8V_MPRvxdi7DN1eEBUyjfkE
                    username:
                      type: string
                      description: >-
                        The username of the account to log in as
                        This key will be supplied only if the authentication_mechanism is "password"
                      example: user53@customer.domain
                    password:
                      type: string
                      description: >-
                        The plaintext password of the user.  Note: The API should not return a 301 redirect to "https" if the client attempts to make a non-encrypted "http" connection.
                        This key will be supplied only if the authentication_mechanism is "password"
                      example: letmeinplz
                    access_token:
                      type: string
                      description:
                        An access token that AminoAPI can present to a third party identity provider, for example an OAuth2 server
                        This key will be supplied only if the authentication_mechanism is "token"

      responses:
        '201':
          description: |
            Successful response.
          headers:
            cache-control: "no-cache, no-store, must-revalidate"
          content:
            text/plain:
              schema:
                type: "object"
                required:
                - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                      - type
                      - id
                      properties:
                        type:
                          type: string
                          example: AccessToken
                        id:
                          type: string
                          description: "The id of the entity being referenced"
                          example: "9bc6871e-ce26-4b8a-96f6-e6688599d938"
                        attributes:
                          $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/Auth/AccessToken.yml#/AccessToken"


        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /users/{user_id}/access_token/{access_token_id}:
    delete:
      summary: |
        Invalidate an access token (and its associated refresh token)
      tags:
      - User Authentication
      operationId: deleteAccessToken
      parameters:
        - in: path
          name: user_id
          required: true
          description: The user identity (please do not use an email address to identify the user)
          schema:
            type: string
        - in: path
          name: access_token_id
          required: true
          description: The id of the access token to revoke
          schema:
            type: string

      responses:
        '204':
          description: |
            The user session was deleted successfully

        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"

