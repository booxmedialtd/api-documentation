openapi: 3.0.0
info:
  description: >
    This API provides information about playback streams which belong to a
    Recording (one Recording has many Stream).

    Note:  This is a transition API and uses a legacy concept of "Recording".  The new
    entity "User Recording" streams are described in /user/{user_id}/user_recordings/{user_recordings_id}/streams

    Please refer to
    https://confluence.aminocom.com/display/BPLAT/Ubiquitous+Domain+Language#UbiquitousDomainLanguage-Stream
    for the domain understanding of what a Stream is.
  version: 1.0.0
  title: Recording Streams API
externalDocs:
  description: Requirements documentation
  url: 'https://confluence.aminocom.com/pages/viewpage.action?pageId=124061868'
tags:
  - name: Stream
    description: |
      This API focuses on one relationship of the User - Recording Entity.
paths:
  '/recordings/{recording_id}/relationships/streams':
    get:
      tags:
        - Stream
      summary: Returns a collection of Stream entities
      description: |
        * **Available since:** 2018-02 (BPLAT-4414))
      operationId: getChannelStreams
      parameters:
        - in: path
          name: recording_id
          description: >-
            The id of the recording that you want to retrieve playback streams
            for
          required: true
          schema:
            type: string
        - in: query
          name: suggested_start_time
          description: >-
            The time used to suggest client when the stream will start
          required: false
          schema:
            type: integer
        - in: query
          name: autoplay
          description: >-
            Supported context(s): catchup.
            Usage: autoplay=catchup.
            If provided, API response will return with links for next available stream URL.
          required: false
          schema:
              type: string
        - in: query
          name: streamType
          description: >-
            By default the middleware will output a default stream type, but the client can request
            a specific stream type by specifying this parameter.  It can be one of hls, dash, mp4, mss
          required: false
          schema:
            type: string
        - in: query
          name: drmSystem
          description: >-
            By default the middleware will output a default DRM system based on the stream type,
            but the client can request a specific DRM system by specifying this parameter.
            It can be one of fairplay, widevine, playready
          required: false
          schema:
            type: string
        - in: query
          name: device_class
          description: Client device class for stream selection.
          required: false
          schema:
            type: string
            enum: [stb, mobile, tvos]
      responses:
        '200':
          description: A collection of Stream entities
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    properties:
                      play_next_catchup:
                        type: string
                        description: "When valid autoplay is requested, and next playable catchup is present â€“ its API URL is added to links array"
                        example: https://boox.fi/api/v1/recordings/1234/relationships/streams?autoplay=catchup&suggested_start_time=450
                  data:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - type
                        - attributes
                      properties:
                        id:
                          type: integer
                          example: 123
                        type:
                          type: string
                          example: Stream
                        attributes:
                          type: array
                          items:
                            $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/Media/StreamEntity.yml#/StreamEntity"
        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: "object"
                      properties:
                        id:
                          type: "string"
                          description: "A unique identifier for this instance of error (allows tracking in logs)"
                        status:
                          type: "string"
                          description: "The http status code for the response"
                        code:
                          type: "string"
                          description: "A static 7 character code that is associated with this family of errors"
                        title:
                          type: "string"
                          description: "A human readable and user friendly (no implementation details) description of the general condition of the error"
                        details:
                          type: "string"
                          description: "A human readable and user friendly description of the specific details of the error"
                      example:
                        - id: "5941163294aef"
                          status: "404"
                          code: "3303"
                          title: "Not found"
                          details: "Recording with ID \"233232\" not found"
        '451':
          description: Unavailable For Legal Reasons
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/rest/snippets/General/ErrorEntity.yml#/Error"
servers:
  - url: 'https://demo.aminocom.com/api/v1/'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
  - bearerAuth: []         # use the same name as above
