openapi: 3.0.0
info:
  description: >-
    Authentication is the process or action of proving or showing something to be true, genuine, or valid.
  version: 1.0.0
  title: Authentication
tags:
- name: User Session
  description: >-
    Endpoints relating to the user session.  These are used to log in and out.
servers:
- url: 'https://demo.aminocom.com/api/auth/v1/'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
- bearerAuth: []         # use the same name as above
paths:

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


  /users/{user_id}/session/:
    post:
      summary: |
        Create a user session ("login") in the middleware and receive a session cookie in return.
        Please look at the model of the request body to see all of the types of credentials supported.
      tags:
      - User Session
      operationId: createUserSession
      parameters:
        - in: query
          name: user_id
          required: true
          description: The user identity (please do not use an email address to identify the user)
          schema:
            type: string

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - authentication_mechanism
              - credentials
              properties:
                authentication_mechanism:
                  type: string
                  example: JWT
                  description: Any of the (case-insensitive) strings [JWT|password]
                credentials:
                  oneOf:
                    - type: object
                      required:
                      - token
                      properties:
                        token:
                          type: string
                          description: A valid (see documentation for validity rules) JWT token that minimally has the user identity as the "sub" claim.
                          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJFbmFibGVTVEIiLCJpYXQiOjE1MzE4MzQyNDEsImV4cCI6MTU2MzM3MDI0MSwiYXVkIjoid3d3LmFtaW5vY29tLmNvbSIsInN1YiI6ImFuZHkuYmVha0BhbWlub2NvbS5jb20ifQ.jtTwO3YEyXmEf5XjjxUK8V_MPRvxdi7DN1eEBUyjfkE
                    - type: object
                      required:
                      - password
                      properties:
                        password:
                          type: string
                          example: "ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f"
                          description: |
                            The SHA256 hashed password of the user.
                            Hashing with SHA-256 prior to applying bcrypt is not intended to increase our system security.
                            We're doing this to allow the STB to store a hashed password to make it harder for opponents
                            with access to the STB local storage to try use it on other services belonging to the user.
      responses:
        '201':
          description: |
            Successful response.
          headers:
            Set-Cookie:
              schema:
                type: string
              description: "Session cookie"
          content:
            text/plain:
              schema:
                type: string
                example: CREATED
                description: |
                  Clients are advised NOT to use the body of the response to determine success or failure, but SHOULD rather
                  rely on the HTTP status code being 201 to indicate success.

        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/v1/snippets/General/ErrorEntity.yml#/Error"

    delete:
      summary: |
        Delete a user session in the middleware ("logout")
      tags:
      - User Session
      operationId: deleteUserSession
      parameters:
        - in: query
          name: user_id
          required: true
          description: The user identity (please do not use an email address to identify the user)
          schema:
            type: string


      responses:
        '204':
          description: |
            The user session was deleted successfully

        '400':
          description: Standard error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/v1/snippets/General/ErrorEntity.yml#/Error"

