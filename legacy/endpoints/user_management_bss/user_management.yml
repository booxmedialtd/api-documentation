openapi: 3.0.0
info:
  version: "1.0.0"
  title: "User management - BSS integration"
  description: >-
    These endpoints provide our legacy user management suite.
tags:
- name: User Account
- name: User Alias
- name: Service Status
- name: Player minutes
- name: Set top box
servers:
- url: 'https://boox.fi/api/management'
paths:

# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# User account
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /user:
    post:
      summary: This method is used to add a new user account.
      description: >-
        This method is used to add a new user account.  The following rules apply:
        (1) Email address or customer-id should not belong to any customer that is not in DELETED state; otherwise API will return an error.
        (2) If the user with that email exists in DELETED state and his grace period is not expired, his previous registration state is restored.
        (3) A new user is created in UNREGISTERED state.
      tags:
      - User Account
      operationId: createUser
      parameters:
      - in: query
        name: service
        description: The service to which the user belongs
        required: true
        schema:
          type: string
      - in: path
        name: email
        description: The email address of the user
        required: true
        schema:
          type: string
      - in: query
        name: cid
        description: Customer identifier
        required: true
        schema:
          type: string
      - in: query
        name: purchase_pin
        description: Purchase PIN code.  Should be 4 numbers long
        required: true
        schema:
          type: integer
      - in: query
        name: dob
        description: User date of birth in yyyy-mm-dd format.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: |
            Successful response.
          content:
            text/plain:
              schema:
                type: string
                example: CREATED
                description: |
                  Clients are advised NOT to use the body of the response to determine success or failure, but SHOULD rather
                  rely on the HTTP status code being 200 to indicate success.
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/booxmedialtd/api-documentation/master/legacy/snippets/general/Error.yml#/Error"
              examples:
                Bar:
                  value:
                    code: 2000
                    text: The swagger UI does not properly implement the Swagger spec, therefore these (correctly specified) examples do not show
                    description: Bug in swagger -https://github.com/swagger-api/swagger-ui/issues/2651
                Foo:
                  value:
                    code: 4000
                    text: The swagger UI does not properly implement the Swagger spec, therefore these (correctly specified) examples do not show


    put:
      summary: This method is used to suspend or activate a user account. It can also be used to change the email or customer-id of an existing account.
      description: >-
        Following rules apply:
        (1) A user in DELETED state is not updated.
        (2) User email can be updated to an email whose registration_state is 'DELETED'. In this case the existing user will be removed from DB completely along with its related data and then email is updated to existing user's email.
        (3) "cid" parameters should not belong to any existing user, even if the user in in DELETED state
        (4) If a user is suspended, his state is changed to DISABLED
        (5) If a DISABLED user is activated and grace period has not expired, then previous registration state is restored, otherwise his state is changed to UNREGISTERED
        In other cases, if a user is activated, his state changed to REGISTERED.
      tags:
      - User Account
      operationId: editUser
      parameters:
      - in: path
        name: email
        description: The current email address of the user (change it in the query string)
        required: true
        schema:
          type: string
      - in: query
        name: service
        description: The service to which the user belongs
        required: true
        schema:
          type: string
      - in: query
        name: email
        description: The new email address of the user (specify the current email in the path)
        required: false
        schema:
          type: string
      - in: query
        name: cid
        description: Customer identifier
        required: false
        schema:
          type: string
      - in: query
        name: purchase_pin
        description: Purchase PIN code.  Should be 4 numbers long
        required: false
        schema:
          type: integer
      - in: query
        name: purchase_pin
        description: Purchase PIN code.  Should be 4 numbers long
        required: true
        schema:
          type: integer
      - in: query
        name: action
        description: SUSPEND or ACTIVATE keywords. Defaults to no value
        required: true
        schema:
          type: string
          enum: ["SUSPEND", "ACTIVATE"]
      responses:
        '200':
          description: |
            Successful response.
          content:
            text/plain:
              schema:
                type: string
                example: OK
                description: |
                  Clients are advised NOT to use the body of the response to determine success or failure, but SHOULD rather
                  rely on the HTTP status code being 200 to indicate success.

    delete:
      summary: Deletes a particular entity. If deletion is successful, the browser will be redirected to the 'admin' page.
      description: >-
        This method is used to delete a user account. The actual data is not deleted till a grace period has expired. Following rules apply:
        (1) User should not be in DELETED state
        (2) Current registration state is stored in previous state and current state is changed to 'DELETED'
      tags:
      - User Account
      operationId: deleteUser
      parameters:
      - in: path
        name: email
        description: The current email address of the user (change it in the query string)
        required: true
        schema:
          type: string
      - in: query
        name: service
        description: The service to which the user belongs
        required: true
        schema:
          type: string
      - in: query
        name: suspend
        description: String 'true'
        required: true
        schema:
          type: string
      - in: query
        name: stamp
        description: Unix timestamp to be appended with email address
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |
            Successful response.
          content:
            text/plain:
              schema:
                type: string
                example: OK
                description: |
                  Clients are advised NOT to use the body of the response to determine success or failure, but SHOULD rather
                  rely on the HTTP status code being 200 to indicate success.

# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# User alias
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Service status
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Player minutes
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set top box
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  /stb/link_user:
    post:
      summary: After the user has bought a STB this API need to be called. This API link or grant ownership of a STB to a user.
      tags:
      - Set top box
      operationId: createRelationshipFromUserToSTB
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
              - serial_no
              - email
              properties:
                serial_no:
                  type: string
                  description: The serial number of the the STB.  This is printed on the STB and its packaging.
                  example: 25-1234567
                email:
                  type: string
                  description: The email address used to identify the user
                  example: boox10@booxtv.fi
                # Public keys are removed in code: booxmedia/src/interface/protected/modules/management/controllers/StbController.php:83
                chipset_id:
                  type: string
                  description: STB device chipset number/ID.  Please ask Amino how to calculate this.
                  example: BCM72604UB
                mac:
                  type: string
                  description: Ethernet interface MAC address
            example:
              favorite: "true"
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                id:
                  type: string
                  example: "123"
                serialNo:
                  type: string
                  example: "DNA-STB00001"
                user:
                  type: object
                  required:
                  - id
                  - email
                  properties:
                    id:
                      type: string
                      example: "10001"
                    email:
                      type: string
                      example: "boox10@booxtv.fi"